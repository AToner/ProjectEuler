# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be
#  1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?


# http://stackoverflow.com/questions/567222/simple-prime-generator-in-python
def gen_primes():
    """ Generate an infinite sequence of prime numbers.
    """
    # Maps composites to primes witnessing their compositeness.
    # This is memory efficient, as the sieve is not "run forward"
    # indefinitely, but only as long as required by the current
    # number being tested.
    #
    D = {}

    # The running integer that's checked for primeness
    q = 2

    while True:
        if q not in D:
            # q is a new prime.
            # Yield it and mark its first multiple that isn't
            # already marked in previous iterations
            #
            yield q
            D[q * q] = [q]
        else:
            # q is composite. D[q] is the list of primes that
            # divide it. Since we've reached q, we no longer
            # need it in the map, but we'll mark the next
            # multiples of its witnesses to prepare for larger
            # numbers
            #
            for p in D[q]:
                D.setdefault(p + q, []).append(p)
            del D[q]

        q += 1


def gen_triangle_numbers(maximum=-1):
    counter = 1
    i = 0
    while True:
        i += counter
        yield i
        if counter == maximum: break
        counter += 1


# How to calculate prime factor...
# http://www.calculatorsoup.com/calculators/math/prime-factors.php
def get_prime_factors(n):
    factors = []
    current_value = float(n)
    prime_generator = gen_primes()
    while current_value > 1:
        prime = next(prime_generator)

        integer = True
        while integer:
            check = current_value / prime
            integer = check.is_integer()
            if integer:
                current_value = check
                factors.append(prime)

    return factors


# How to calculate the number of divisors.
# http://mathcentral.uregina.ca/qq/database/qq.02.06/joe1.html
def number_divisors(num):
    prime_factors = get_prime_factors(num)
    unique_primes = set(prime_factors)

    total = 1
    for unique_prime in unique_primes:
        total *= (prime_factors.count(unique_prime) + 1)

    return total


for tn in gen_triangle_numbers():
    count = number_divisors(tn)
    if count >= 500:
        print(tn, count)
        break

